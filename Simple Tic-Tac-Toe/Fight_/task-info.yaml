type: edu
custom_name: Fight!
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;
    import java.util.*;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            String state = scanner.nextLine();
            Character winner = '?';
            Character currentWinner = 'n';
            byte length = 3;
            boolean finished = false;
            boolean impossible = false;
            boolean draw = false;
            boolean emptyCell = false;
            byte xCounter = 0;
            byte oCounter = 0;

            Character[][] rows = {{state.charAt(0), state.charAt(1), state.charAt(2)}, {state.charAt(3), state.charAt(4), state.charAt(5)}, {state.charAt(6), state.charAt(7), state.charAt(8)}};
            Character[][] columns = {{state.charAt(0), state.charAt(3), state.charAt(6)}, {state.charAt(1), state.charAt(4), state.charAt(7)}, {state.charAt(2), state.charAt(5), state.charAt(8)}};
            Character[][] diagonals = {{state.charAt(0), state.charAt(4), state.charAt(8)}, {state.charAt(2), state.charAt(4), state.charAt(6)}};

            for (int i = 0; i < length; i++) {
                for (int j = 0; j < length; j++) {
                    if( rows[i][j] == 'X') {
                        xCounter++;
                    } else if (rows[i][j] == 'O') {
                        oCounter++;
                    } else if (rows[i][j] == '_') {
                        emptyCell = true;
                    } else if (rows[i][j] == ' ') {
                        impossible = true;
                    }
                }
            }                                           // проверка адекватности поля

            if (Math.abs(xCounter - oCounter) > 1) {
                impossible = true;
            }

            if (impossible == false) {
                for (int i = 0; i < length; i++) {
                    if (rows[i][0].equals(rows[i][1]) && rows[i][0].equals(rows[i][2]) && finished == false) {
                        winner = rows[i][0];
                        finished = true;
                    } else if (rows[i][0].equals(rows[i][1]) && rows[i][0].equals(rows[i][2]) && finished == true) {
                        impossible = true;
                    } else if (rows[i][0] == ' ' || rows[i][1] == ' ' || rows[i][2] == ' ') {
                        impossible = true;
                    }
                }                   // проверка победителя в строках
                Character rowWinner = winner != '?' ? winner : 'n';

                for (int i = 0; i < length; i++) {
                    if (columns[i][0].equals(columns[i][1]) && columns[i][0].equals(columns[i][2]) && finished == false) {
                        winner = columns[i][0];
                        finished = true;
                    } else if (columns[i][0].equals(columns[i][1]) && columns[i][0].equals(columns[i][2]) && finished == true) {
                        impossible = true;
                    } else if (columns[i][0] == ' ' || columns[i][1] == ' ' || columns[i][2] == ' ') {
                        impossible = true;
                    }
                }                   // проверка победителя в столбцах
                Character columnWinner = winner != '?' ? winner : 'n';

                for (int i = 0; i < length - 1; i++) {
                    if (diagonals[i][0].equals(diagonals[i][1]) && diagonals[i][0].equals(diagonals[i][2]) && finished == false) {
                        winner = diagonals[i][0];
                        finished = true;
                    } else if (diagonals[i][0].equals(diagonals[i][1]) && diagonals[i][0].equals(diagonals[i][2]) && finished == true) {
                        impossible = true;
                    } else if (diagonals[i][0] == ' ' || diagonals[i][1] == ' ' || diagonals[i][2] == ' ') {
                        impossible = true;
                    }
                }               // проверка победителя в диагоналях
                Character diagWinner = winner != '?' ? winner : 'n';
            }

            finished = impossible == false && winner == '?' && emptyCell == false ? true : false;
            draw = finished == true && winner == '?' ? true : false;

            PrintResults(state, winner, draw, impossible, emptyCell);
        }

        public static void PrintResults (String state, Character winner, boolean draw, boolean impossible, boolean emptyCell){
            System.out.println("---------");
            System.out.println(String.format("| %s %s %s |", state.charAt(0), state.charAt(1), state.charAt(2)));
            System.out.println(String.format("| %s %s %s |", state.charAt(3), state.charAt(4), state.charAt(5)));
            System.out.println(String.format("| %s %s %s |", state.charAt(6), state.charAt(7), state.charAt(8)));
            System.out.println("---------");

            if (winner != '?' && impossible == false) {
                System.out.println(winner + " wins");
            } else if (draw == true) {
                System.out.println("Draw");
            } else if (impossible == true) {
                System.out.println("Impossible");
            } else if (emptyCell == true) {
                System.out.println("Game not finished");
            }
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Random;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X':
                    return X;
                case 'O':
                    return O;
                case ' ':
                case '_':
                    return FREE;
                default:
                    return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                System.arraycopy(field[row], 0, this.field[row], 0, 3);
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] = FieldState.get(str.charAt((row * 3 + col)));
                }
            }
        }

        FieldState get(int x, int y) {
            return field[y - 1][x - 1];
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        } else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        boolean isWinning(FieldState side) {
            if (side == FieldState.FREE) {
                return false;
            }

            if (get(1, 1) == side &&
                get(1, 2) == side &&
                get(1, 3) == side) {
                return true;
            }

            if (get(2, 1) == side &&
                get(2, 2) == side &&
                get(2, 3) == side) {
                return true;
            }

            if (get(3, 1) == side &&
                get(3, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 1) == side &&
                get(3, 1) == side) {
                return true;
            }

            if (get(1, 2) == side &&
                get(2, 2) == side &&
                get(3, 2) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 3) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 1) == side &&
                get(2, 2) == side &&
                get(3, 3) == side) {
                return true;
            }

            if (get(1, 3) == side &&
                get(2, 2) == side &&
                get(3, 1) == side) {
                return true;
            }

            return false;
        }

        boolean isDraw() {
            if (isWinning(FieldState.X) || isWinning(FieldState.O)) {
                return false;
            }
            for (int x = 1; x <= 3; x++) {
                for (int y = 1; y <= 3; y++) {
                    if (get(x, y) == FieldState.FREE) {
                        return false;
                    }
                }
            }
            return true;
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 0;
                for (String line : lines) {
                    char[] cols = new char[]{
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y++;
                }

                TicTacToeField ticTacToeField = new TicTacToeField(field);
                return ticTacToeField;
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }

            return fields;
        }

        public int getXCount() {

            return (int) Arrays.stream(field)
                .flatMap(Arrays::stream)
                .filter(field -> field != null && field.equals(FieldState.X))
                .count();
        }

        public int getOCount() {
            return (int) Arrays.stream(field)
                .flatMap(Arrays::stream)
                .filter(field -> field != null && field.equals(FieldState.O))
                .count();
        }
    }


    class Clue {
        int x, y;

        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {

        static String[] inputs = new String[]{
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {

                Random random = new Random();
                String randomInput = "";
                for (int j = 0; j < 10; j++) {
                    int randX = random.nextInt(4) + 1;
                    int randY = random.nextInt(4) + 1;
                    randomInput += randX + " " + randY + "\n";
                }

                String fullMoveInput = randomInput
                    + iterateCells(input) + iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }

                if (Math.abs(curr.getXCount() - curr.getOCount()) > 1) {
                    return CheckResult.wrong("Wrong number of X's and O's in the field!");
                }
            }

            List<String> lines = reply
                .strip()
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String lastLine = lines.get(lines.size() - 1);

            if (!(lastLine.contains("X wins")
                || lastLine.contains("O wins")
                || lastLine.contains("Draw")
            )) {
                return new CheckResult(false,
                    "Can't parse final result, " +
                        "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"O wins\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("X wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"X wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastLine.contains("O wins") && lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your final result contains \"O wins\" and \"Draw\" " +
                        "at the same time. This is impossible.\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            TicTacToeField lastField = fields.get(fields.size() - 1);

            if (lastField.isWinning(FieldState.X) && !lastLine.contains("X wins")) {
                return new CheckResult(false,
                    "Your last field shows that X wins, " +
                        "and your last line should contain \"X wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.O) && !lastLine.contains("O wins")) {
                return new CheckResult(false,
                    "Your last field shows that O wins, " +
                        "and your last line should contain \"O wins\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isDraw() && !lastLine.contains("Draw")) {
                return new CheckResult(false,
                    "Your last field shows that there is a draw, " +
                        "and your last line should contain \"Draw\".\n" +
                        "Your last line: \"" + lastLine + "\"");
            }

            if (lastField.isWinning(FieldState.X) ||
                lastField.isWinning(FieldState.O) ||
                lastField.isDraw()) {
                return CheckResult.correct();
            }

            return CheckResult.wrong(
                "Your last field contains unfinished game, the game should be finished!"
            );
        }
    }
  learner_created: false
- name: src/tictactoe/test.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5401#comment
status: Failed
feedback:
  message: |-
    Error in test #3

    Program ran out of input. You tried to read more than expected.

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    [last 250 lines of output are shown, 297 skipped]
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 4 3
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 4 3
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 4 1
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 4 2
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 4 3
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 4 3
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 4 1
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 4 2
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 4 3
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 4 3
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 4 1
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 4 2
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 4 3
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 4 3
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 4 1
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 2 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 4 2
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 4
    Coordinates should be from 1 to 3!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 2 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 2
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 3 3
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 1
    This cell is occupied! Choose another one!
    Enter the coordinates: &gt; 1 2
    This cell is occupied! Choose another one!
    Enter the coordinates:
  time: Sat, 29 Jan 2022 13:01:29 UTC
record: -1
